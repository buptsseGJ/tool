package cn.edu.thu.platform.parser;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import cn.edu.thu.platform.entity.Race;
import cn.edu.thu.platform.entity.Report;
import cn.edu.thu.platform.entity.Reports;

public class DomToEntity {

	public void startDom(Node node) {
		if (node == null) {
			return;
		}
		Node root = ((Document) node).getDocumentElement();
		loopDom(root);
	}

	public void loopDom(Node node) {
		if (node.hasChildNodes()) {
			// get all the report element
			NodeList reportList = node.getChildNodes();
			Node textNode = node.getFirstChild();
			for (int i = 0; i < reportList.getLength(); i++) {
				if(reportList.item(i).getNodeType()!=(Node.TEXT_NODE)){
					// get all the race element for each report
					System.out.println("reportList Length:"+reportList.getLength());
					NodeList raceList = reportList.item(i).getChildNodes();
					Set<Race> races = new HashSet<Race>(); 
					for (int j = 0; j < raceList.getLength(); j++) {
						// deal with each race
						System.out.println("raceList length:"+raceList.getLength());
						if(raceList.item(j).getNodeType()!=Node.TEXT_NODE){
							if (raceList.item(j).hasChildNodes()) {
								textNode = raceList.item(j).getFirstChild();
								Node tempLine1 = textNode.getNextSibling();
								textNode = tempLine1.getNextSibling();
								Node tempLine2 = textNode.getNextSibling();
								textNode = tempLine2.getNextSibling(); 
								Node tempVariable = textNode.getNextSibling();
								textNode = tempVariable.getNextSibling(); 
								Node tempPackageClass = textNode.getNextSibling();
								textNode = tempPackageClass.getNextSibling();
								Node tempDetail = textNode.getNextSibling();
								textNode = tempDetail.getNextSibling();
								Race tempRace = new Race(Integer.parseInt(tempLine1.getFirstChild().getNodeValue()
										.toString()), Integer.parseInt(tempLine2.getFirstChild().getNodeValue()
										.toString()), tempVariable.getFirstChild().getNodeValue().toString(),
										tempPackageClass.getFirstChild().getNodeValue().toString(),
										tempDetail.getFirstChild().getNodeValue().toString());
								races.add(tempRace);
							}
						}
					}
					NamedNodeMap reportAttributes = reportList.item(i).getAttributes();
					String programName = reportAttributes.getNamedItem("name").getNodeValue().toString();
					Report report = new Report(races,programName);
					if(!races.isEmpty()){
						Reports.reports.add(report);
					}
				}
			}
		}
	}
}
